name: "CustoPiZe"

on:
  repository_dispatch:
    types: [octopi_release, octoprint_release]
  workflow_dispatch:
    inputs:
      octopi_version:
        description: "OctoPi version (leave empty to use latest stable release)"
        required: false
        default: ''
      octoprint_version:
        description: "OctoPrint version (leave empty to use latest stable release)"
        required: false
        default: ''

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:

    - name: "⬇ Checkout"
      uses: actions/checkout@v2

    - name: "🔎 Determine OctoPi version"
      uses: actions/github-script@v4
      with:
        script: |
          let release = null;

          let version = '';
          if (context.eventName === "respository_dispatch" && context.payload.type === "octopi_release") {
            version = context.payload.client_payload.version;
          } else if (context.eventName === "workflow_dispatch") {
            version = context.payload.inputs.octopi_version;
          }

          if (version) {
            const query = `query {
              repository(owner: "guysoft", name: "Octopi") {
                release(tagName:"${version}") {
                  tagName
                  releaseAssets(first:5) {
                    nodes {
                      name
                      downloadUrl
                    }
                  }
                }
              }
            }`;

            const result = await github.graphql(query);
            console.log({result});

            release = result.repository.release;

          } else {
            const query = `query {
              repository(owner:"guysoft", name:"OctoPi") {
                latestRelease {
                  tagName
                  releaseAssets(first:5) {
                    nodes {
                      name
                      downloadUrl
                    }
                  }
                }
              }
            }`;

            const result = await github.graphql(query);
            console.log({result});

            release = result.repository.latestRelease;
          }

          if (!release || !release.tagName || !release.releaseAssets || !release.releaseAssets.nodes) core.setFailed("Could not find OctoPi release");

          const octopiVersion = release.tagName;

          let octopiUrl = null;
          for (const asset of release.releaseAssets.nodes) {
            if (asset.name.startsWith("octopi-") && asset.name.endsWith(".zip")) {
              octopiUrl = asset.downloadUrl;
              break;
            }
          }

          if (!octopiUrl) core.setFailed("Could not find OctoPi download URL");

          console.log(`OctoPi version: ${octopiVersion}`)
          console.log(`OctoPi download URL: ${octopiUrl}`)

          core.exportVariable("OCTOPI_VERSION", octopiVersion)
          core.exportVariable("OCTOPI_URL", octopiUrl)

    - name: "🔎 Determine OctoPrint version"
      run: |
        if [[ "${{ github.event_name }}" = "repository_dispatch" ]]; then
          OCTOPRINT_VERSION="${{ github.event.client_payload.version }}"
        else
          OCTOPRINT_VERSION="${{ github.event.inputs.octoprint_version }}"
        fi

        if [ -z "$OCTOPRINT_VERSION" ]; then
          OCTOPRINT_VERSION=$(curl https://pypi.org/pypi/OctoPrint/json -s | jq -r '.info.version')
        fi

        # Make sure we have a published version
        curl -fsSL --output /dev/null --head https://pypi.org/pypi/OctoPrint/$OCTOPRINT_VERSION/ || exit 1

        echo "OctoPrint version: $OCTOPRINT_VERSION"

        echo "OCTOPRINT_VERSION=$OCTOPRINT_VERSION" >> $GITHUB_ENV

    - name: "⬇ Download OctoPi"
      id: octopi_download
      run: |
        mkdir build
        cd build
        wget ${{ env.OCTOPI_URL }} -O octopi.zip
        
        unzip octopi.zip
        rm octopi.zip

        IMAGE=$(ls *.img | head -n 1)
        mv $IMAGE input.img

    - name: "🏗 Run CustoPiZer"
      run: |
        sudo modprobe loop
        docker run --rm --privileged \
          -e OCTOPRINT_VERSION=${{ env.OCTOPRINT_VERSION }} \
          -v ${{ github.workspace }}/build:/CustoPiZer/workspace \
          -v ${{ github.workspace }}/scripts:/CustoPiZer/workspace/scripts \
          ghcr.io/octoprint/custopizer:latest

    - name: "📦 Package the image"
      run: |
        OCTOPI_VERSION="${{ env.OCTOPI_VERSION }}"
        OCTOPRINT_VERSION="${{ env.OCTOPRINT_VERSION }}"
        
        IMAGE="octopi-$OCTOPI_VERSION-$OCTOPRINT_VERSION.img"
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV

        cd build
        mv output.img $IMAGE
        md5sum $IMAGE > $IMAGE.md5
        sha256sum $IMAGE > $IMAGE.sha256

        IMAGE_SHA256=`cat $IMAGE.sha256 | cut -d ' ' -f 1`
        echo "IMAGE_SHA256=$IMAGE_SHA256" >> $GITHUB_ENV

        IMAGE_SIZE=`stat -c %s $IMAGE`
        echo "IMAGE_SIZE=$IMAGE_SIZE" >> $GITHUB_ENV

        zip $IMAGE.zip $IMAGE
        md5sum $IMAGE.zip > $IMAGE.zip.md5
        sha256sum $IMAGE.zip > $IMAGE.zip.sha256

        ZIP_SHA256=`cat $IMAGE.zip.sha256 | cut -d ' ' -f 1`
        echo "ZIP_SHA256=$ZIP_SHA256" >> $GITHUB_ENV

        ZIP_SIZE=`stat -c %s $IMAGE.zip`
        echo "ZIP_SIZE=$ZIP_SIZE" >> $GITHUB_ENV
    
    - name: "📝 Prepare release"
      run: |
        RELEASE_NAME="OctoPi ${{ env.OCTOPI_VERSION }} with OctoPrint ${{ env.OCTOPRINT_VERSION }}"
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

        RELEASE_TAG="${{ env.OCTOPI_VERSION }}.op${{ env.OCTOPRINT_VERSION }}"
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

        RELEASE_BODY=""
        (git rev-parse $RELEASE_TAG >/dev/null 2>&1) || RELEASE_BODY="Created with [CustoPiZer](https://github.com/OctoPrint/CustoPiZer)"

        echo "RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV

    - name: "📝 Prepare rpi-imager json snippet"
      run: |
        IMAGE_SHA256="${{ env.IMAGE_SHA256 }}"
        ZIP_SHA256="${{ env.ZIP_SHA256 }}"
        IMAGE_SIZE="${{ env.IMAGE_SIZE }}"
        ZIP_SIZE="${{ env.ZIP_SIZE }}"

        NAME="${{ env.RELEASE_NAME }}"
        URL="https://github.com/OctoPrint/OctoPi-UpToDate/releases/download/${{ env.RELEASE_TAG }}/${{ env.IMAGE }}.zip"
        DATE=`date '+%Y-%m-%d'`

        cd build
        cat > rpi-imager.json <<EOF
        {
          "name": "$NAME",
          "description": "A Raspberry Pi distribution for 3d printers. Ships OctoPrint ${{ env.OCTOPRINT_VERSION }} out-of-the-box.",
          "url": "$URL",
          "icon": "https://octopi.octoprint.org/rpi-imager.png",
          "release_date": "$DATE",
          "extract_size": $IMAGE_SIZE,
          "extract_sha256": "$IMAGE_SHA256",
          "image_download_size": $ZIP_SIZE,
          "image_download_sha256": "$ZIP_SHA256"
        }
        EOF

    - name: "🔖 Create release & attach assets"
      uses: softprops/action-gh-release@v1
      with:
        name: "${{ env.RELEASE_NAME }}"
        tag_name: "${{ env.RELEASE_TAG }}"
        body: "${{ env.RELEASE_BODY }}"
        prerelease: ${{ contains(env.OCTOPRINT_VERSION, 'rc') }}
        fail_on_unmatched_files: true
        files: |
          build/${{ env.IMAGE }}.zip
          build/${{ env.IMAGE }}.zip.md5
          build/${{ env.IMAGE }}.zip.sha256
          build/rpi-imager.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
