#!/bin/bash

if [ "$EUID" -ne 0 ]
  then echo "Please run as root/with sudo"
  exit 1
fi

action=$1
single=$2

run-action() {
  unit=$1
  echo "Running $action for $unit..."
  systemctl $action --no-block "$unit"
  echo "... done."
}

add-path-unit() {
  dev=$1
  name=$2

  # Add runtime path unit file that starts the service when the device is plugged in
  path_dir="/run/systemd/system"
  if ! grep -s -q -F "PathExistsGlob=$dev" "$path_dir/camera-streamer-usb-$name.path"; then
    echo "Adding path unit for autolaunch of camera-streamer-usb@$name"
    cat > "$path_dir/camera-streamer-usb-$name.path" <<EOF
[Unit]
Description=camera-streamer $name autolaunch

[Path]
PathExistsGlob=$dev
Unit=camera-streamer-usb@$name.service
EOF
    systemctl daemon-reload || true
  fi
}

# start/stop/restart the libcamera service
if [ -z "$single" ] || [[ "$single" == "libcamera" ]]; then
  run-action "camera-streamer-libcamera.service"
fi

# iterate over all the camera confs in /boot/camera-streamer
for conf in /boot/camera-streamer/usb-*.conf; do
  # get the name of the camera
  name=$(basename "$conf" .conf)
  name=${name#usb-}

  if [[ "$single" != "" ]] && [[ "$single" != "$name" ]]; then
    # if we are only doing a single camera, skip the others
    continue
  fi

  source $conf
  [ -n "$DEVICE" ] || continue

  if [[ "$action" == "start" ]] || [[ "$action" == "restart" ]]; then
    add-path-unit "$DEVICE" "$name"
  fi

  # start/stop/restart the USB camera services
  run-action "camera-streamer-usb-$name.path"
  if systemctl is-active --quiet "camera-streamer-usb@$name.service" && ([[ "$action" == "stop" ]] || [[ "$action" == "restart" ]]); then
    run-action "camera-streamer-usb@$name.service"
  fi
done
